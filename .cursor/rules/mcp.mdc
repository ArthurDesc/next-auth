---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
Règle pour déterminer quand utiliser les MCP servers

1. sequential-thinking

But : Gérer des tâches complexes impliquant un raisonnement logique structuré, souvent multi-étapes.

Utiliser ce serveur lorsque :

L'utilisateur demande une solution étape par étape.

Une tâche nécessite la planification d'une suite logique (ex : générer un plan de composant, une stratégie d'implémentation).

Il faut décomposer un problème abstrait en sous-problèmes plus simples.

2. context7

But : Accéder à la documentation technique d'une bibliothèque externe ou résoudre l'identité d'une librairie.

Utiliser ce serveur lorsque :

L'utilisateur demande la documentation d'un package, d'une fonction ou d'une API précise.

L'utilisateur souhaite installer un nouveau la package.

Il est nécessaire de récupérer le contenu d'une librairie pour éclairer une réponse technique.

Il faut utiliser les outils resolve-library-id ou get-library-docs.


3. browser-tools
     But : Inspecter, auditer ou extraire dynamiquement des informations depuis une page web locale.
     Utiliser ce serveur lorsque :
       • L'utilisateur souhaite récupérer les logs console, réseau, erreurs JS.
       • Il faut exécuter des audits de performance, accessibilité, SEO, Next.js.
       • L'utilisateur veut capturer une capture d'écran ou inspecter un élément sélectionné.
     Outils disponibles :
       - getConsoleLogs, getConsoleErrors, getNetworkErrors, getNetworkLogs
       - takeScreenshot, getSelectedElement
       - runAccessibilityAudit, runPerformanceAudit, runSEOAudit, runNextJSAudit
       - runBestPracticesAudit, runDebuggerMode, runAuditMode, wipeLogs

4. curl  
     But : Effectuer des requêtes HTTP externes (GET, POST, etc.) pour interroger des APIs, récupérer des ressources distantes, ou tester un endpoint.  
     Utiliser ce serveur lorsque :  
       • L'utilisateur souhaite tester une API avec une requête GET, POST, PUT ou DELETE.  
       • Il est nécessaire de simuler un appel HTTP vers une URL précise.  
       • On veut inspecter le corps de réponse brut d'un serveur (JSON, HTML, etc.).  
     Outils à utiliser : fetch, custom HTTP headers, body, method (selon contexte de la requête).
globs: